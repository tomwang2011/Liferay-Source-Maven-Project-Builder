<?xml version="1.0"?>

<project name="MavenPortal" basedir="." default="deploy-portal-pom" xmlns:ivy="antlib:org.apache.ivy.ant">
	<!--Set to Liferay Portal directory-->

	<property file="build-ext.properties" />
	<property file="build.properties" />

	<property file="${portal.dir}/app.server.${user.name}.properties" />
	<property file="${portal.dir}/app.server.${env.COMPUTERNAME}.properties" />
	<property file="${portal.dir}/app.server.${env.HOST}.properties" />
	<property file="${portal.dir}/app.server.${env.HOSTNAME}.properties" />
	<property file="${portal.dir}/app.server.properties" />

	<property name="tomcat.dir" value="${app.server.tomcat.dir}"/>
	<property name="app.server.lib.global.dir" value="${tomcat.dir}/lib/ext" />
	<property name="app.server.lib.portal.dir" value="${tomcat.dir}/webapps/ROOT/WEB-INF/lib" />
	<property name="module.dependency.list" value="" />
	<property name="module.list" value="SourceModule" />
	<property name="project.dir" value="${basedir}/portal" />
	<property name="sdk.dir" value="${portal.dir}/tools/sdk" />

	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${portal.dir}/lib/development/ant-contrib.jar" />
		</classpath>
	</taskdef>

	<path id="module.classpath">
		<fileset dir="${portal.dir}/lib/development" includes="*.jar" />
		<fileset dir="${app.server.lib.global.dir}" includes="*.jar" />
		<fileset dir="${app.server.lib.portal.dir}" includes="*.jar" />
		<fileset dir="${sdk.dir}/dependencies/aQute.bnd/lib" includes="*.jar" />
		<fileset dir="${sdk.dir}/lib" includes="activation.jar,javax.servlet-api.jar,jsp-api.jar,mail.jar" />
	</path>

	<scriptdef name="parser" language="javascript">
		<attribute name="module" />
		<attribute name="splitter" />
		<attribute name="property" />
		<attribute name="extension" />
		<![CDATA[
	    var module = attributes.get("module");
	    var splitter = attributes.get("splitter");
		var index = module.lastIndexOf(splitter);
		if (index == -1) index = module.length()-1;
		project.setProperty(attributes.get("property"), module.substring(0, index));
		project.setProperty(attributes.get("extension"), module.substring(index+1, module.length()));
		]]>
	</scriptdef>

	<macrodef name="append-dependency-list">
		<attribute name="dependency" />
		<attribute name="group" default="${groupId}" />
		<attribute name="version" default="${version}" />

		<sequential>
			<if>
				<not>
					<equals arg1="@{dependency}" arg2="" />
				</not>
				<then>
					<if>
						<equals arg1="${module.dependency.list}" arg2="" />
						<then>
							<var name="concat" value="@{group}:@{version}:@{dependency}" />
						</then>
						<else>
							<var name="concat" value="${module.dependency.list} @{group}:@{version}:@{dependency}" />
						</else>
					</if>
					<var name="module.dependency.list" value="${concat}" />
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="deploy-module-pom">
		<attribute name="module" />
		<attribute name="src.dir.name" />

		<sequential>
			<solve-module-specific-dependencies	src.dir.name="@{src.dir.name}" />

			<if>
				<equals arg1="${dependencies.off}" arg2="false" />
				<then>
					<if>
						<available file="${src.dir}/ivy.xml" />
						<then>
							<var name="ivy.module.dependency" value="${src.dir}/ivy.xml" />
						</then>
					</if>

					<if>
						<available file="@{module}/../build.xml" />
						<then>
							<var name="module.build.file" value="@{module}/../build.xml" />
						</then>
						<elseif>
							<available file="@{module}/../../../build.xml" />
							<then>
								<var name="module.build.file" value="@{module}/../../../build.xml" />
							</then>
						</elseif>
					</if>
				</then>
			</if>

			<if>
				<equals arg1="${dependencies.off}" arg2="true" />
				<then>
					<var name="ivy.module.dependency" value="$" />
					<var name="module.build.file" value="$" />
					<var name="module.dependency.list" value="" />
				</then>
			</if>

			<java classname="CreateModulePOM" classpath="${basedir}/classes">
				<arg value="${groupId}" />
				<arg value="@{src.dir.name}" />
				<arg value="${version}" />
				<arg value="jar" />
				<arg value="@{src.dir.name}" />
				<arg value="@{module}" />
				<arg value="${portal.dir}" />
				<arg value="${ivy.module.dependency}" />
				<arg value="${module.build.file}" />
				<arg line="${module.dependency.list}" />
			</java>

			<var name="module.build.file" unset="true" />
			<var name="module.dependency.list" unset="true" />
			<var name="module.dependency.list" value="" />
			<var name="ivy.module.dependency" unset="true" />
		</sequential>
	</macrodef>

	<macrodef name="set-module-source-directory">
		<attribute name="module" />

		<sequential>
			<dirname property="src.dir" file="@{module}" />

			<basename property="src.dir.name" file="${src.dir}" />

			<if>
				<equals arg1="${src.dir.name}" arg2="WEB-INF" />
				<then>
					<dirname property="temp" file="${src.dir}" />

					<var name="src.dir" unset="true" />

					<dirname property="src.dir" file="${temp}" />

					<var name="temp" unset="true" />
					<var name="src.dir.name" unset="true" />

					<basename property="src.dir.name" file="${src.dir}" />
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="solve-module-specific-dependencies">
		<attribute name="src.dir.name" />

		<sequential>
			<parser module="@{src.dir.name}" splitter="-" property="module.name" extension="module.extension" />
			<if>
				<and>
					<available file="${project.dir}/${module.name}-web" type="dir" />
					<equals arg1="${module.extension}" arg2="test" />
				</and>
				<then>
					<append-dependency-list	dependency="portal-test-internal" />
				</then>
			</if>

			<if>
				<and>
					<equals arg1="@{src.dir.name}" arg2="portal-test-internal" />
				</and>
				<then>
					<append-dependency-list	dependency="portal-test" />
				</then>
			</if>

			<property file="dependency.properties" prefix="appender." />

			<propertyselector property="appenders" match="appender\.(.*)" select="\1" />

			<for list="${appenders}" param="module.name">
				<sequential>
					<if>
						<equals arg1="@{src.dir.name}" arg2="@{module.name}" />
						<then>
							<for list="${appender.@{module.name}}" param="dependency" delimiter=";">
								<sequential>
									<append-dependency-list	dependency="@{dependency}" />
								</sequential>
							</for>
						</then>
					</if>
				</sequential>
			</for>

			<property file="external-dependency.properties" prefix="appender.ext." />

			<propertyselector property="appenders.ext" match="appender\.ext\.(.*)" select="\1" />

			<for list="${appenders.ext}" param="module.name">
				<sequential>
					<if>
						<equals arg1="@{src.dir.name}" arg2="@{module.name}" />
						<then>
							<for list="${appender.ext.@{module.name}}" param="dependency" delimiter=";">
								<sequential>
									<parser module="@{dependency}" splitter=":" property="tmp" extension="dep.artifactId" />
									<parser module="${tmp}" splitter=":" property="dep.groupId" extension="dep.version" />

									<append-dependency-list
										dependency="${dep.artifactId}"
										group="${dep.groupId}"
										version="${dep.version}"
									/>
								</sequential>
							</for>
						</then>
					</if>
				</sequential>
			</for>
		</sequential>
	</macrodef>

	<target name="build-tomcat">
		<if>
			<equals arg1="${skip.build.portal}" arg2="false" />
			<then>
				<subant target="all">
					<fileset dir="${portal.dir}" includes="build.xml" />
				</subant>
			</then>
		</if>
	</target>

	<target name="clean">
		<delete dir="portal" quiet="true" />
		<delete dir="classes" quiet="true" />
		<delete dir="ivytopom" quiet="true"/>
	</target>

	<target name="deploy-all-module">
		<mkdir dir="classes" />

		<javac
			srcdir="${basedir}/src"
			destdir="${basedir}/classes"
			includeantruntime="false"
		/>

		<for param="module">
			<path>
				<dirset dir="${portal.dir}">
					<include name="**/src"/>
				</dirset>
			</path>
			<sequential>
				<set-module-source-directory module="@{module}" />

				<property file="exclude-modules.properties" />

				<if>
					<and>
						<available file="${src.dir}/build.xml" />
						<not>
							<contains string="${exclude-modules}" substring="${src.dir.name}" />
						</not>
					</and>

					<then>
						<mkdir dir="${project.dir}/${src.dir.name}" />

						<var name="concat" value="${module.list} ${src.dir.name}" />

						<var name="module.list" value="${concat}" />
					</then>
				</if>

				<var name="src.dir" unset="true" />
				<var name="src.dir.name" unset="true" />
			</sequential>
		</for>

		<for param="module">
			<path>
				<dirset dir="${portal.dir}">
					<include name="**/src"/>
				</dirset>
			</path>
			<sequential>
				<set-module-source-directory module="@{module}"	/>

				<if>
					<and>
						<available file="${src.dir}/build.xml" />
						<not>
							<contains string="${exclude-modules}" substring="${src.dir.name}" />
						</not>
					</and>
					<then>
						<deploy-module-pom src.dir.name="${src.dir.name}" module="@{module}" />
					</then>
				</if>

				<var name="src.dir" unset="true" />
				<var name="src.dir.name" unset="true" />
			</sequential>
		</for>

		<mkdir dir="${project.dir}/SourceModule" />

		<java classname="CreateSourceModulePOM" classpath="${basedir}/classes">
			<arg value="${groupId}" />
			<arg value="SourceModule" />
			<arg value="${version}" />
			<arg value="pom" />
			<arg value="SourceModule" />
			<arg line="${module.list}" />
		</java>
	</target>

	<target name="deploy-portal-pom" depends="build-tomcat, clean, deploy-all-module">
		<pathconvert property="module.classpath.convert" refid="module.classpath" pathsep=" " />

		<if>
				<equals arg1="${dependencies.off}" arg2="true" />
				<then>
					<var name="module.classpath.convert" value="" />
				</then>
		</if>

		<java classname="CreatePortalPOM" classpath="${basedir}/classes">
			<arg value="${groupId}" />
			<arg value="portal" />
			<arg value="${version}" />
			<arg value="pom" />
			<arg value="Liferay Source Maven Project" />
			<arg value="${portal.dir}" />
			<arg line="${module.list}" />
			<arg line="${module.classpath.convert}" />
		</java>

		<copy file="nbactions.xml" todir="portal" />

		<delete dir="ivytopom" quiet="true"/>
	</target>
</project>